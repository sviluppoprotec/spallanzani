//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TheSite.GIC.App_Code.DataSetDef {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetReport : DataSet {
        
        private QueryDataTable tableQuery;
        
        private CampiDataTable tableCampi;
        
        private TuttiCampiDataTable tableTuttiCampi;
        
        public DataSetReport() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSetReport(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Query"] != null)) {
                    this.Tables.Add(new QueryDataTable(ds.Tables["Query"]));
                }
                if ((ds.Tables["Campi"] != null)) {
                    this.Tables.Add(new CampiDataTable(ds.Tables["Campi"]));
                }
                if ((ds.Tables["TuttiCampi"] != null)) {
                    this.Tables.Add(new TuttiCampiDataTable(ds.Tables["TuttiCampi"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QueryDataTable Query {
            get {
                return this.tableQuery;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CampiDataTable Campi {
            get {
                return this.tableCampi;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TuttiCampiDataTable TuttiCampi {
            get {
                return this.tableTuttiCampi;
            }
        }
        
        public override DataSet Clone() {
            DataSetReport cln = ((DataSetReport)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Query"] != null)) {
                this.Tables.Add(new QueryDataTable(ds.Tables["Query"]));
            }
            if ((ds.Tables["Campi"] != null)) {
                this.Tables.Add(new CampiDataTable(ds.Tables["Campi"]));
            }
            if ((ds.Tables["TuttiCampi"] != null)) {
                this.Tables.Add(new TuttiCampiDataTable(ds.Tables["TuttiCampi"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableQuery = ((QueryDataTable)(this.Tables["Query"]));
            if ((this.tableQuery != null)) {
                this.tableQuery.InitVars();
            }
            this.tableCampi = ((CampiDataTable)(this.Tables["Campi"]));
            if ((this.tableCampi != null)) {
                this.tableCampi.InitVars();
            }
            this.tableTuttiCampi = ((TuttiCampiDataTable)(this.Tables["TuttiCampi"]));
            if ((this.tableTuttiCampi != null)) {
                this.tableTuttiCampi.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSetReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetReport.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableQuery = new QueryDataTable();
            this.Tables.Add(this.tableQuery);
            this.tableCampi = new CampiDataTable();
            this.Tables.Add(this.tableCampi);
            this.tableTuttiCampi = new TuttiCampiDataTable();
            this.Tables.Add(this.tableTuttiCampi);
        }
        
        private bool ShouldSerializeQuery() {
            return false;
        }
        
        private bool ShouldSerializeCampi() {
            return false;
        }
        
        private bool ShouldSerializeTuttiCampi() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void QueryRowChangeEventHandler(object sender, QueryRowChangeEvent e);
        
        public delegate void CampiRowChangeEventHandler(object sender, CampiRowChangeEvent e);
        
        public delegate void TuttiCampiRowChangeEventHandler(object sender, TuttiCampiRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QueryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnIdQuery;
            
            private DataColumn columnDenominazione;
            
            private DataColumn columnDescrizione;

			private DataColumn columnUsername;
            
            internal QueryDataTable() : 
                    base("Query") {
                this.InitClass();
            }
            
            internal QueryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdQueryColumn {
                get {
                    return this.columnIdQuery;
                }
            }
            
            internal DataColumn DenominazioneColumn {
                get {
                    return this.columnDenominazione;
                }
            }
            
            internal DataColumn DescrizioneColumn {
                get {
                    return this.columnDescrizione;
                }
            }

			internal DataColumn UsernameColumn 
			{
				get 
				{
					return this.columnUsername;
				}
			}
            
            public QueryRow this[int index] {
                get {
                    return ((QueryRow)(this.Rows[index]));
                }
            }
            
            public event QueryRowChangeEventHandler QueryRowChanged;
            
            public event QueryRowChangeEventHandler QueryRowChanging;
            
            public event QueryRowChangeEventHandler QueryRowDeleted;
            
            public event QueryRowChangeEventHandler QueryRowDeleting;
            
            public void AddQueryRow(QueryRow row) {
                this.Rows.Add(row);
            }
            
            public QueryRow AddQueryRow(int IdQuery, string Denominazione, string Descrizione) {
                QueryRow rowQueryRow = ((QueryRow)(this.NewRow()));
                rowQueryRow.ItemArray = new object[] {
                        IdQuery,
                        Denominazione,
                        Descrizione};
                this.Rows.Add(rowQueryRow);
                return rowQueryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                QueryDataTable cln = ((QueryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new QueryDataTable();
            }
            
            internal void InitVars() {
                this.columnIdQuery = this.Columns["IdQuery"];
                this.columnDenominazione = this.Columns["Denominazione"];
                this.columnDescrizione = this.Columns["Descrizione"];
				this.columnUsername = this.Columns["Username"];
            }
            
            private void InitClass() {
                this.columnIdQuery = new DataColumn("IdQuery", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdQuery);
                this.columnDenominazione = new DataColumn("Denominazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDenominazione);
                this.columnDescrizione = new DataColumn("Descrizione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescrizione);
				this.columnUsername = new DataColumn("Username", typeof(string), null, System.Data.MappingType.Element);
				this.Columns.Add(this.columnUsername);			
            }
            
            public QueryRow NewQueryRow() {
                return ((QueryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new QueryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(QueryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QueryRowChanged != null)) {
                    this.QueryRowChanged(this, new QueryRowChangeEvent(((QueryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QueryRowChanging != null)) {
                    this.QueryRowChanging(this, new QueryRowChangeEvent(((QueryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QueryRowDeleted != null)) {
                    this.QueryRowDeleted(this, new QueryRowChangeEvent(((QueryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QueryRowDeleting != null)) {
                    this.QueryRowDeleting(this, new QueryRowChangeEvent(((QueryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveQueryRow(QueryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QueryRow : DataRow {
            
            private QueryDataTable tableQuery;
            
            internal QueryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuery = ((QueryDataTable)(this.Table));
            }
            
            public int IdQuery {
                get {
                    try {
                        return ((int)(this[this.tableQuery.IdQueryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuery.IdQueryColumn] = value;
                }
            }
            
            public string Denominazione {
                get {
                    try {
                        return ((string)(this[this.tableQuery.DenominazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuery.DenominazioneColumn] = value;
                }
            }

			public string Username 
			{
				get 
				{
					try 
					{
						return ((string)(this[this.tableQuery.UsernameColumn]));
					}
					catch (InvalidCastException e) 
					{
						throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
					}
				}
				set 
				{
					this[this.tableQuery.UsernameColumn] = value;
				}
			}
            
            public string Descrizione {
                get {
                    try {
                        return ((string)(this[this.tableQuery.DescrizioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuery.DescrizioneColumn] = value;
                }
            }
            
            public bool IsIdQueryNull() {
                return this.IsNull(this.tableQuery.IdQueryColumn);
            }
            
            public void SetIdQueryNull() {
                this[this.tableQuery.IdQueryColumn] = System.Convert.DBNull;
            }
            
            public bool IsDenominazioneNull() {
                return this.IsNull(this.tableQuery.DenominazioneColumn);
            }
            
            public void SetDenominazioneNull() {
                this[this.tableQuery.DenominazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescrizioneNull() {
                return this.IsNull(this.tableQuery.DescrizioneColumn);
            }
            
            public void SetDescrizioneNull() {
                this[this.tableQuery.DescrizioneColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class QueryRowChangeEvent : EventArgs {
            
            private QueryRow eventRow;
            
            private DataRowAction eventAction;
            
            public QueryRowChangeEvent(QueryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public QueryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CampiDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAggregazione;
            
            private DataColumn columnFiltro;
            
            private DataColumn columnNascosto;
            
            private DataColumn columnOrdinamento;
            
            private DataColumn columnNomeCampo;
            
            private DataColumn columnNomeTabella;
            
            private DataColumn columnIdGlossario;
            
            private DataColumn columnTipologia;
            
            private DataColumn columnTipoDato;
            
            private DataColumn columnAlias;
            
            internal CampiDataTable() : 
                    base("Campi") {
                this.InitClass();
            }
            
            internal CampiDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AggregazioneColumn {
                get {
                    return this.columnAggregazione;
                }
            }
            
            internal DataColumn FiltroColumn {
                get {
                    return this.columnFiltro;
                }
            }
            
            internal DataColumn NascostoColumn {
                get {
                    return this.columnNascosto;
                }
            }
            
            internal DataColumn OrdinamentoColumn {
                get {
                    return this.columnOrdinamento;
                }
            }
            
            internal DataColumn NomeCampoColumn {
                get {
                    return this.columnNomeCampo;
                }
            }
            
            internal DataColumn NomeTabellaColumn {
                get {
                    return this.columnNomeTabella;
                }
            }
            
            internal DataColumn IdGlossarioColumn {
                get {
                    return this.columnIdGlossario;
                }
            }
            
            internal DataColumn TipologiaColumn {
                get {
                    return this.columnTipologia;
                }
            }
            
            internal DataColumn TipoDatoColumn {
                get {
                    return this.columnTipoDato;
                }
            }
            
            internal DataColumn AliasColumn {
                get {
                    return this.columnAlias;
                }
            }
            
            public CampiRow this[int index] {
                get {
                    return ((CampiRow)(this.Rows[index]));
                }
            }
            
            public event CampiRowChangeEventHandler CampiRowChanged;
            
            public event CampiRowChangeEventHandler CampiRowChanging;
            
            public event CampiRowChangeEventHandler CampiRowDeleted;
            
            public event CampiRowChangeEventHandler CampiRowDeleting;
            
            public void AddCampiRow(CampiRow row) {
                this.Rows.Add(row);
            }
            
            public CampiRow AddCampiRow(string Aggregazione, string Filtro, bool Nascosto, string Ordinamento, string NomeCampo, string NomeTabella, int IdGlossario, string Tipologia, string TipoDato, string Alias) {
                CampiRow rowCampiRow = ((CampiRow)(this.NewRow()));
                rowCampiRow.ItemArray = new object[] {
                        Aggregazione,
                        Filtro,
                        Nascosto,
                        Ordinamento,
                        NomeCampo,
                        NomeTabella,
                        IdGlossario,
                        Tipologia,
                        TipoDato,
                        Alias};
                this.Rows.Add(rowCampiRow);
                return rowCampiRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CampiDataTable cln = ((CampiDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CampiDataTable();
            }
            
            internal void InitVars() {
                this.columnAggregazione = this.Columns["Aggregazione"];
                this.columnFiltro = this.Columns["Filtro"];
                this.columnNascosto = this.Columns["Nascosto"];
                this.columnOrdinamento = this.Columns["Ordinamento"];
                this.columnNomeCampo = this.Columns["NomeCampo"];
                this.columnNomeTabella = this.Columns["NomeTabella"];
                this.columnIdGlossario = this.Columns["IdGlossario"];
                this.columnTipologia = this.Columns["Tipologia"];
                this.columnTipoDato = this.Columns["TipoDato"];
                this.columnAlias = this.Columns["Alias"];
            }
            
            private void InitClass() {
                this.columnAggregazione = new DataColumn("Aggregazione", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAggregazione);
                this.columnFiltro = new DataColumn("Filtro", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFiltro);
                this.columnNascosto = new DataColumn("Nascosto", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNascosto);
                this.columnOrdinamento = new DataColumn("Ordinamento", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrdinamento);
                this.columnNomeCampo = new DataColumn("NomeCampo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNomeCampo);
                this.columnNomeTabella = new DataColumn("NomeTabella", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNomeTabella);
                this.columnIdGlossario = new DataColumn("IdGlossario", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdGlossario);
                this.columnTipologia = new DataColumn("Tipologia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTipologia);
                this.columnTipoDato = new DataColumn("TipoDato", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTipoDato);
                this.columnAlias = new DataColumn("Alias", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlias);
            }
            
            public CampiRow NewCampiRow() {
                return ((CampiRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CampiRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CampiRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CampiRowChanged != null)) {
                    this.CampiRowChanged(this, new CampiRowChangeEvent(((CampiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CampiRowChanging != null)) {
                    this.CampiRowChanging(this, new CampiRowChangeEvent(((CampiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CampiRowDeleted != null)) {
                    this.CampiRowDeleted(this, new CampiRowChangeEvent(((CampiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CampiRowDeleting != null)) {
                    this.CampiRowDeleting(this, new CampiRowChangeEvent(((CampiRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCampiRow(CampiRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CampiRow : DataRow {
            
            private CampiDataTable tableCampi;
            
            internal CampiRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCampi = ((CampiDataTable)(this.Table));
            }
            
            public string Aggregazione {
                get {
                    try {
                        return ((string)(this[this.tableCampi.AggregazioneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableCampi.AggregazioneColumn] = value;
                }
            }
            
            public string Filtro {
                get {
                    try {
                        return ((string)(this[this.tableCampi.FiltroColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableCampi.FiltroColumn] = value;
                }
            }
            
            public bool Nascosto {
                get {
                    try {
                        return ((bool)(this[this.tableCampi.NascostoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableCampi.NascostoColumn] = value;
                }
            }
            
            public string Ordinamento {
                get {
                    try {
                        return ((string)(this[this.tableCampi.OrdinamentoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableCampi.OrdinamentoColumn] = value;
                }
            }
            
            public string NomeCampo {
                get {
                    try {
                        return ((string)(this[this.tableCampi.NomeCampoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableCampi.NomeCampoColumn] = value;
                }
            }
            
            public string NomeTabella {
                get {
                    try {
                        return ((string)(this[this.tableCampi.NomeTabellaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableCampi.NomeTabellaColumn] = value;
                }
            }
            
            public int IdGlossario {
                get {
                    try {
                        return ((int)(this[this.tableCampi.IdGlossarioColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableCampi.IdGlossarioColumn] = value;
                }
            }
            
            public string Tipologia {
                get {
                    try {
                        return ((string)(this[this.tableCampi.TipologiaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableCampi.TipologiaColumn] = value;
                }
            }
            
            public string TipoDato {
                get {
                    try {
                        return ((string)(this[this.tableCampi.TipoDatoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableCampi.TipoDatoColumn] = value;
                }
            }
            
            public string Alias {
                get {
                    try {
                        return ((string)(this[this.tableCampi.AliasColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableCampi.AliasColumn] = value;
                }
            }
            
            public bool IsAggregazioneNull() {
                return this.IsNull(this.tableCampi.AggregazioneColumn);
            }
            
            public void SetAggregazioneNull() {
                this[this.tableCampi.AggregazioneColumn] = System.Convert.DBNull;
            }
            
            public bool IsFiltroNull() {
                return this.IsNull(this.tableCampi.FiltroColumn);
            }
            
            public void SetFiltroNull() {
                this[this.tableCampi.FiltroColumn] = System.Convert.DBNull;
            }
            
            public bool IsNascostoNull() {
                return this.IsNull(this.tableCampi.NascostoColumn);
            }
            
            public void SetNascostoNull() {
                this[this.tableCampi.NascostoColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrdinamentoNull() {
                return this.IsNull(this.tableCampi.OrdinamentoColumn);
            }
            
            public void SetOrdinamentoNull() {
                this[this.tableCampi.OrdinamentoColumn] = System.Convert.DBNull;
            }
            
            public bool IsNomeCampoNull() {
                return this.IsNull(this.tableCampi.NomeCampoColumn);
            }
            
            public void SetNomeCampoNull() {
                this[this.tableCampi.NomeCampoColumn] = System.Convert.DBNull;
            }
            
            public bool IsNomeTabellaNull() {
                return this.IsNull(this.tableCampi.NomeTabellaColumn);
            }
            
            public void SetNomeTabellaNull() {
                this[this.tableCampi.NomeTabellaColumn] = System.Convert.DBNull;
            }
            
            public bool IsIdGlossarioNull() {
                return this.IsNull(this.tableCampi.IdGlossarioColumn);
            }
            
            public void SetIdGlossarioNull() {
                this[this.tableCampi.IdGlossarioColumn] = System.Convert.DBNull;
            }
            
            public bool IsTipologiaNull() {
                return this.IsNull(this.tableCampi.TipologiaColumn);
            }
            
            public void SetTipologiaNull() {
                this[this.tableCampi.TipologiaColumn] = System.Convert.DBNull;
            }
            
            public bool IsTipoDatoNull() {
                return this.IsNull(this.tableCampi.TipoDatoColumn);
            }
            
            public void SetTipoDatoNull() {
                this[this.tableCampi.TipoDatoColumn] = System.Convert.DBNull;
            }
            
            public bool IsAliasNull() {
                return this.IsNull(this.tableCampi.AliasColumn);
            }
            
            public void SetAliasNull() {
                this[this.tableCampi.AliasColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CampiRowChangeEvent : EventArgs {
            
            private CampiRow eventRow;
            
            private DataRowAction eventAction;
            
            public CampiRowChangeEvent(CampiRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CampiRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TuttiCampiDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNomeTabella;
            
            private DataColumn columnNomeCampo;
            
            private DataColumn columnIdGlossario;
            
            private DataColumn columnTipologia;
            
            private DataColumn columnTipoDato;
            
            private DataColumn columnAlias;
            
            internal TuttiCampiDataTable() : 
                    base("TuttiCampi") {
                this.InitClass();
            }
            
            internal TuttiCampiDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NomeTabellaColumn {
                get {
                    return this.columnNomeTabella;
                }
            }
            
            internal DataColumn NomeCampoColumn {
                get {
                    return this.columnNomeCampo;
                }
            }
            
            internal DataColumn IdGlossarioColumn {
                get {
                    return this.columnIdGlossario;
                }
            }
            
            internal DataColumn TipologiaColumn {
                get {
                    return this.columnTipologia;
                }
            }
            
            internal DataColumn TipoDatoColumn {
                get {
                    return this.columnTipoDato;
                }
            }
            
            internal DataColumn AliasColumn {
                get {
                    return this.columnAlias;
                }
            }
            
            public TuttiCampiRow this[int index] {
                get {
                    return ((TuttiCampiRow)(this.Rows[index]));
                }
            }
            
            public event TuttiCampiRowChangeEventHandler TuttiCampiRowChanged;
            
            public event TuttiCampiRowChangeEventHandler TuttiCampiRowChanging;
            
            public event TuttiCampiRowChangeEventHandler TuttiCampiRowDeleted;
            
            public event TuttiCampiRowChangeEventHandler TuttiCampiRowDeleting;
            
            public void AddTuttiCampiRow(TuttiCampiRow row) {
                this.Rows.Add(row);
            }
            
            public TuttiCampiRow AddTuttiCampiRow(string NomeTabella, string NomeCampo, int IdGlossario, string Tipologia, string TipoDato, string Alias) {
                TuttiCampiRow rowTuttiCampiRow = ((TuttiCampiRow)(this.NewRow()));
                rowTuttiCampiRow.ItemArray = new object[] {
                        NomeTabella,
                        NomeCampo,
                        IdGlossario,
                        Tipologia,
                        TipoDato,
                        Alias};
                this.Rows.Add(rowTuttiCampiRow);
                return rowTuttiCampiRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TuttiCampiDataTable cln = ((TuttiCampiDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TuttiCampiDataTable();
            }
            
            internal void InitVars() {
                this.columnNomeTabella = this.Columns["NomeTabella"];
                this.columnNomeCampo = this.Columns["NomeCampo"];
                this.columnIdGlossario = this.Columns["IdGlossario"];
                this.columnTipologia = this.Columns["Tipologia"];
                this.columnTipoDato = this.Columns["TipoDato"];
                this.columnAlias = this.Columns["Alias"];
            }
            
            private void InitClass() {
                this.columnNomeTabella = new DataColumn("NomeTabella", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNomeTabella);
                this.columnNomeCampo = new DataColumn("NomeCampo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNomeCampo);
                this.columnIdGlossario = new DataColumn("IdGlossario", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdGlossario);
                this.columnTipologia = new DataColumn("Tipologia", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTipologia);
                this.columnTipoDato = new DataColumn("TipoDato", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTipoDato);
                this.columnAlias = new DataColumn("Alias", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlias);
            }
            
            public TuttiCampiRow NewTuttiCampiRow() {
                return ((TuttiCampiRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TuttiCampiRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TuttiCampiRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TuttiCampiRowChanged != null)) {
                    this.TuttiCampiRowChanged(this, new TuttiCampiRowChangeEvent(((TuttiCampiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TuttiCampiRowChanging != null)) {
                    this.TuttiCampiRowChanging(this, new TuttiCampiRowChangeEvent(((TuttiCampiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TuttiCampiRowDeleted != null)) {
                    this.TuttiCampiRowDeleted(this, new TuttiCampiRowChangeEvent(((TuttiCampiRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TuttiCampiRowDeleting != null)) {
                    this.TuttiCampiRowDeleting(this, new TuttiCampiRowChangeEvent(((TuttiCampiRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTuttiCampiRow(TuttiCampiRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TuttiCampiRow : DataRow {
            
            private TuttiCampiDataTable tableTuttiCampi;
            
            internal TuttiCampiRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTuttiCampi = ((TuttiCampiDataTable)(this.Table));
            }
            
            public string NomeTabella {
                get {
                    try {
                        return ((string)(this[this.tableTuttiCampi.NomeTabellaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableTuttiCampi.NomeTabellaColumn] = value;
                }
            }
            
            public string NomeCampo {
                get {
                    try {
                        return ((string)(this[this.tableTuttiCampi.NomeCampoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableTuttiCampi.NomeCampoColumn] = value;
                }
            }
            
            public int IdGlossario {
                get {
                    try {
                        return ((int)(this[this.tableTuttiCampi.IdGlossarioColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableTuttiCampi.IdGlossarioColumn] = value;
                }
            }
            
            public string Tipologia {
                get {
                    try {
                        return ((string)(this[this.tableTuttiCampi.TipologiaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableTuttiCampi.TipologiaColumn] = value;
                }
            }
            
            public string TipoDato {
                get {
                    try {
                        return ((string)(this[this.tableTuttiCampi.TipoDatoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableTuttiCampi.TipoDatoColumn] = value;
                }
            }
            
            public string Alias {
                get {
                    try {
                        return ((string)(this[this.tableTuttiCampi.AliasColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Impossibile ottenere un valore perché è DBNull.", e);
                    }
                }
                set {
                    this[this.tableTuttiCampi.AliasColumn] = value;
                }
            }
            
            public bool IsNomeTabellaNull() {
                return this.IsNull(this.tableTuttiCampi.NomeTabellaColumn);
            }
            
            public void SetNomeTabellaNull() {
                this[this.tableTuttiCampi.NomeTabellaColumn] = System.Convert.DBNull;
            }
            
            public bool IsNomeCampoNull() {
                return this.IsNull(this.tableTuttiCampi.NomeCampoColumn);
            }
            
            public void SetNomeCampoNull() {
                this[this.tableTuttiCampi.NomeCampoColumn] = System.Convert.DBNull;
            }
            
            public bool IsIdGlossarioNull() {
                return this.IsNull(this.tableTuttiCampi.IdGlossarioColumn);
            }
            
            public void SetIdGlossarioNull() {
                this[this.tableTuttiCampi.IdGlossarioColumn] = System.Convert.DBNull;
            }
            
            public bool IsTipologiaNull() {
                return this.IsNull(this.tableTuttiCampi.TipologiaColumn);
            }
            
            public void SetTipologiaNull() {
                this[this.tableTuttiCampi.TipologiaColumn] = System.Convert.DBNull;
            }
            
            public bool IsTipoDatoNull() {
                return this.IsNull(this.tableTuttiCampi.TipoDatoColumn);
            }
            
            public void SetTipoDatoNull() {
                this[this.tableTuttiCampi.TipoDatoColumn] = System.Convert.DBNull;
            }
            
            public bool IsAliasNull() {
                return this.IsNull(this.tableTuttiCampi.AliasColumn);
            }
            
            public void SetAliasNull() {
                this[this.tableTuttiCampi.AliasColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TuttiCampiRowChangeEvent : EventArgs {
            
            private TuttiCampiRow eventRow;
            
            private DataRowAction eventAction;
            
            public TuttiCampiRowChangeEvent(TuttiCampiRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TuttiCampiRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
